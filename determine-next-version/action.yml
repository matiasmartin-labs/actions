name: Determine Next Version
description: |
  This action calculates the next version number based on the provided release type.
  It reads the current version from latest release and increments it according to semantic versioning rules.
  The new version is outputted as both a plain version and a tagged version (with 'v' prefix).
inputs:
  release-type:
    description: |
      The type of release to calculate the version for. 
      Options are 'major', 'minor' or 'patch'.
    required: true
    default: 'patch'
  is-snapshot:
    description: |
      Whether the version is a snapshot version. 
      If true, the version will be suffixed with '-SNAPSHOT'.
    required: false
    default: 'false'
outputs:
  new-version:
    description: |
      The calculated version number based on the provided release type.
    value: ${{ steps.calculate-version.outputs.new-version }}
  new-version-tag:
    description: |
      The calculated version number with 'v' prefix based on the provided release type.
    value: ${{ steps.calculate-version.outputs.new-version-tag }}
runs:
  using: 'composite'
  steps:
    - name: Fetch all tags
      shell: bash
      run: git fetch --tags

    - name: Get latest tag
      id: get-latest-tag
      shell: bash
      run: |
        #!/bin/bash
        set -e

        # Fetch the latest tag from the repository
        TAG=$(git tag --list 'v*.*.*' --sort=-v:refname | head -n1)
        echo "Latest tag: $TAG"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Calculate Version
      id: calculate-version
      shell: bash
      run: |
        #!/bin/bash
        set -e

        RELEASE_TYPE="${{ inputs.release-type }}"
        echo "Release type: $RELEASE_TYPE"

        # Get the latest version from the previous step
        current_version="${{ steps.get-latest-tag.outputs.tag }}"
        echo "Current version: $current_version"

        # Remove the 'v' prefix if present
        current_version=${current_version#v}

        # Split the version into its components
        IFS='.' read -r major minor patch <<< "$current_version"
        
        echo "Current Major: $major"
        echo "Current Minor: $minor"
        echo "Current Patch: $patch"

        # Calculate the new version based on the release type

        if [ "$RELEASE_TYPE" = "major" ]; then
          MAJOR=$((major+1))
          MINOR=0
          PATCH=0
        elif [ "$RELEASE_TYPE" = "minor" ]; then
          MAJOR=$major
          MINOR=$((minor+1))
          PATCH=0
        elif [ "$RELEASE_TYPE" = "patch" ]; then
          MAJOR=$major
          MINOR=$minor
          PATCH=$((patch+1))
        fi

        # Check if the version is a snapshot version
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        if [ "${{ inputs.is-snapshot }}" = "true" ]; then
          NEW_VERSION="$NEW_VERSION-SNAPSHOT"
        fi

        echo "Next version: $NEW_VERSION"
        # Set the new version as output
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        # Set the new version with 'v' prefix as output
        echo "new-version-tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version with tag: v$NEW_VERSION"